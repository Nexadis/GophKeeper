// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/datas/metadata.go
//
// Generated by this command:
//
//	mockgen -source=internal/models/datas/metadata.go -destination=mocks/intern/models/datas/metadata.go
//
// Package mock_datas is a generated GoMock package.
package mock_datas

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIData is a mock of IData interface.
type MockIData struct {
	ctrl     *gomock.Controller
	recorder *MockIDataMockRecorder
}

// MockIDataMockRecorder is the mock recorder for MockIData.
type MockIDataMockRecorder struct {
	mock *MockIData
}

// NewMockIData creates a new mock instance.
func NewMockIData(ctrl *gomock.Controller) *MockIData {
	mock := &MockIData{ctrl: ctrl}
	mock.recorder = &MockIDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIData) EXPECT() *MockIDataMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method.
func (m *MockIData) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockIDataMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIData)(nil).CreatedAt))
}

// Description mocks base method.
func (m *MockIData) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockIDataMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockIData)(nil).Description))
}

// EditedAt mocks base method.
func (m *MockIData) EditedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EditedAt indicates an expected call of EditedAt.
func (mr *MockIDataMockRecorder) EditedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditedAt", reflect.TypeOf((*MockIData)(nil).EditedAt))
}

// ID mocks base method.
func (m *MockIData) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockIDataMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIData)(nil).ID))
}

// SetDescription mocks base method.
func (m *MockIData) SetDescription(desc string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDescription", desc)
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockIDataMockRecorder) SetDescription(desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockIData)(nil).SetDescription), desc)
}

// SetID mocks base method.
func (m *MockIData) SetID(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", id)
}

// SetID indicates an expected call of SetID.
func (mr *MockIDataMockRecorder) SetID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIData)(nil).SetID), id)
}

// SetUserID mocks base method.
func (m *MockIData) SetUserID(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserID", id)
}

// SetUserID indicates an expected call of SetUserID.
func (mr *MockIDataMockRecorder) SetUserID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserID", reflect.TypeOf((*MockIData)(nil).SetUserID), id)
}

// SetValue mocks base method.
func (m *MockIData) SetValue(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue.
func (mr *MockIDataMockRecorder) SetValue(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockIData)(nil).SetValue), value)
}

// UserID mocks base method.
func (m *MockIData) UserID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(int)
	return ret0
}

// UserID indicates an expected call of UserID.
func (mr *MockIDataMockRecorder) UserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockIData)(nil).UserID))
}

// Value mocks base method.
func (m *MockIData) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIDataMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIData)(nil).Value))
}
