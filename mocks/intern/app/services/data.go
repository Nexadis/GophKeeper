// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/data.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/data.go -destination=mocks/intern/app/services/data.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	datas "github.com/Nexadis/GophKeeper/internal/models/datas"
	users "github.com/Nexadis/GophKeeper/internal/models/users"
	gomock "go.uber.org/mock/gomock"
)

// MockDataRepo is a mock of DataRepo interface.
type MockDataRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepoMockRecorder
}

// MockDataRepoMockRecorder is the mock recorder for MockDataRepo.
type MockDataRepoMockRecorder struct {
	mock *MockDataRepo
}

// NewMockDataRepo creates a new mock instance.
func NewMockDataRepo(ctrl *gomock.Controller) *MockDataRepo {
	mock := &MockDataRepo{ctrl: ctrl}
	mock.recorder = &MockDataRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepo) EXPECT() *MockDataRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDataRepo) Add(ctx context.Context, data datas.IData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDataRepoMockRecorder) Add(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDataRepo)(nil).Add), ctx, data)
}

// DeleteByID mocks base method.
func (m *MockDataRepo) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockDataRepoMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockDataRepo)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockDataRepo) GetByID(ctx context.Context, id int) (datas.IData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(datas.IData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDataRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDataRepo)(nil).GetByID), ctx, id)
}

// GetByUser mocks base method.
func (m *MockDataRepo) GetByUser(ctx context.Context, u users.User) ([]datas.IData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", ctx, u)
	ret0, _ := ret[0].([]datas.IData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockDataRepoMockRecorder) GetByUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockDataRepo)(nil).GetByUser), ctx, u)
}

// Ping mocks base method.
func (m *MockDataRepo) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDataRepoMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDataRepo)(nil).Ping), ctx)
}

// Update mocks base method.
func (m *MockDataRepo) Update(ctx context.Context, data datas.IData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataRepoMockRecorder) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataRepo)(nil).Update), ctx, data)
}
