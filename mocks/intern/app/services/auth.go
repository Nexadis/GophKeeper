// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/auth.go -destination=mocks/intern/app/services/auth.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	users "github.com/Nexadis/GophKeeper/internal/models/users"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepo) AddUser(ctx context.Context, u users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepoMockRecorder) AddUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepo)(nil).AddUser), ctx, u)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, username)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, id int) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockUserRepo) GetUserByName(ctx context.Context, username string) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, username)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserRepoMockRecorder) GetUserByName(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserRepo)(nil).GetUserByName), ctx, username)
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockHasher) Auth(ctx context.Context, u users.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, u, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockHasherMockRecorder) Auth(ctx, u, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockHasher)(nil).Auth), ctx, u, password)
}

// Password mocks base method.
func (m *MockHasher) Password(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Password indicates an expected call of Password.
func (mr *MockHasherMockRecorder) Password(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockHasher)(nil).Password), password)
}

// MockUsersFactory is a mock of UsersFactory interface.
type MockUsersFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUsersFactoryMockRecorder
}

// MockUsersFactoryMockRecorder is the mock recorder for MockUsersFactory.
type MockUsersFactoryMockRecorder struct {
	mock *MockUsersFactory
}

// NewMockUsersFactory creates a new mock instance.
func NewMockUsersFactory(ctrl *gomock.Controller) *MockUsersFactory {
	mock := &MockUsersFactory{ctrl: ctrl}
	mock.recorder = &MockUsersFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersFactory) EXPECT() *MockUsersFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockUsersFactory) New(username string, hash []byte) users.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", username, hash)
	ret0, _ := ret[0].(users.User)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockUsersFactoryMockRecorder) New(username, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUsersFactory)(nil).New), username, hash)
}
